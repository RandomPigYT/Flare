!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/randompigyt/Reflection/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(OBJ)/%.o	Makefile	/^$(OBJ)\/%.o: $(SRC)\/%.cpp$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJS)$/;"	t
ASTDeclVisitor	src/plugin.cpp	/^	ASTDeclVisitor(char *file){$/;"	f	class:ASTDeclVisitor	file:
ASTDeclVisitor	src/plugin.cpp	/^class ASTDeclVisitor : public RecursiveASTVisitor<ASTDeclVisitor> {$/;"	c	file:
BIN	Makefile	/^BIN:=bin$/;"	m
C-project-template	README.md	/^# C-project-template/;"	c
CC	Makefile	/^CC:=g++$/;"	m
CREATE_DIR_COMMAND	Makefile	/^CREATE_DIR_COMMAND:=.\/dirs.sh$/;"	m
CreateASTConsumer	src/plugin.cpp	/^  std::unique_ptr<ASTConsumer> CreateASTConsumer(CompilerInstance &CI,$/;"	f	class:Reflection	typeref:typename:std::unique_ptr<ASTConsumer>	file:
DIRS	Makefile	/^DIRS:=$(patsubst $(SRC)\/%, $(OBJ)\/%, $(shell find $(SRC)\/ -mindepth 1 -type d))$/;"	m
HandleTranslationUnit	src/plugin.cpp	/^  void HandleTranslationUnit(ASTContext &Context) override {$/;"	f	class:MyASTConsumer	typeref:typename:void	file:
Hi	testFiles/as.c	/^} Hi;$/;"	t	typeref:struct:__anon9d8c9a6c0108	file:
INCLUDE	Makefile	/^INCLUDE:=include$/;"	m
INCLUDES	Makefile	/^INCLUDES:=$(shell find $(INCLUDE) -type f -name "*.h")$/;"	m
LDFLAGS	Makefile	/^LDFLAGS := -fPIC -shared$/;"	m
MyASTConsumer	src/plugin.cpp	/^	MyASTConsumer(char *file) : filename(file), Visitor(filename){$/;"	f	class:MyASTConsumer	file:
MyASTConsumer	src/plugin.cpp	/^class MyASTConsumer : public ASTConsumer {$/;"	c	file:
OBJ	Makefile	/^OBJ:=obj$/;"	m
OBJS	Makefile	/^OBJS:=$(patsubst $(SRC)\/%.cpp, $(OBJ)\/%.o, $(SRCS))$/;"	m
ParseArgs	src/plugin.cpp	/^  bool ParseArgs(const CompilerInstance &CI,$/;"	f	class:Reflection	typeref:typename:bool	file:
Reflection	src/plugin.cpp	/^class Reflection : public PluginASTAction {$/;"	c	file:
SRC	Makefile	/^SRC:=src$/;"	m
SRCS	Makefile	/^SRCS:=$(shell find $(SRC) -type  f -name "*.cpp")$/;"	m
TARGET	Makefile	/^TARGET:=$(BIN)\/reflection.so$/;"	m
TraverseDecl	src/plugin.cpp	/^  bool TraverseDecl(Decl *D) {$/;"	f	class:ASTDeclVisitor	typeref:typename:bool	file:
VALGRIND_OUT	Makefile	/^VALGRIND_OUT:=.\/val_out.txt$/;"	m
Visitor	src/plugin.cpp	/^	ASTDeclVisitor Visitor;$/;"	m	class:MyASTConsumer	typeref:typename:ASTDeclVisitor	file:
X	src/plugin.cpp	/^X("reflection", "Reflect about the source code");$/;"	v	typeref:typename:FrontendPluginRegistry::Add<Reflection>	file:
__anon4fe5c53f0108	testFiles/lol.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0108	testFiles/as.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0208	testFiles/as.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0308	testFiles/as.c	/^	struct {$/;"	s	struct:__anon9d8c9a6c0208	file:
__anon9d8c9a6c0408	testFiles/as.c	/^	struct {$/;"	s	struct:__anon9d8c9a6c0208	file:
__anon9d8c9a6c0508	testFiles/as.c	/^	struct {$/;"	s	function:main	file:
a	testFiles/as.c	/^		int a;$/;"	m	struct:main::__anon9d8c9a6c0508	typeref:typename:int	file:
a	testFiles/as.c	/^	int a;$/;"	m	struct:__anon9d8c9a6c0208	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:__anon9d8c9a6c0108	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:hello_t	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:helloo	typeref:typename:int	file:
a	testFiles/lol.c	/^	int a;$/;"	m	struct:__anon4fe5c53f0108	typeref:typename:int	file:
a	testFiles/lol.c	/^	int a;$/;"	m	struct:lol_t	typeref:typename:int	file:
all	Makefile	/^all: dirs $(TARGET)$/;"	t
asdklfj	testFiles/as.c	/^} asdklfj;$/;"	t	typeref:struct:__anon9d8c9a6c0208	file:
b	testFiles/as.c	/^		int b;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0308	typeref:typename:int	file:
b	testFiles/as.c	/^  int b;$/;"	m	struct:hello_t	typeref:typename:int	file:
boobies	testFiles/as.c	/^typedef asdklfj*** boobies;$/;"	t	typeref:typename:asdklfj ***	file:
bruh	testFiles/lol.c	/^} bruh;$/;"	t	typeref:struct:__anon4fe5c53f0108	file:
c	testFiles/as.c	/^		int c;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0308	typeref:typename:int	file:
clean	Makefile	/^clean:$/;"	t
d	testFiles/as.c	/^		int d;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	typeref:typename:int	file:
dirs	Makefile	/^dirs:$/;"	t
f	testFiles/as.c	/^		int f;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	typeref:typename:int	file:
filename	src/plugin.cpp	/^	char *filename;$/;"	m	class:ASTDeclVisitor	typeref:typename:char *	file:
filename	src/plugin.cpp	/^	char *filename;$/;"	m	class:MyASTConsumer	typeref:typename:char *	file:
format	Makefile	/^format:$/;"	t
g	testFiles/as.c	/^	} g;$/;"	m	struct:__anon9d8c9a6c0208	typeref:struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	file:
hello	testFiles/as.c	/^} hello;$/;"	t	typeref:struct:hello_t	file:
hello_t	testFiles/as.c	/^typedef struct hello_t {$/;"	s	file:
helloo	testFiles/as.c	/^struct helloo {$/;"	s	file:
lol_t	testFiles/lol.c	/^struct lol_t{$/;"	s	file:
main	testFiles/as.c	/^int main(void){$/;"	f	typeref:typename:int
run	Makefile	/^run: $(TARGET)$/;"	t
testGen	testFiles/as.c	/^#define testGen(/;"	d	file:
valgrind	Makefile	/^valgrind:$/;"	t
