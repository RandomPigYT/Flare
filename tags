!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/randompigyt/Reflection/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
$(OBJ)/%.o	Makefile	/^$(OBJ)\/%.o: $(SRC)\/%.cpp$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJS)$/;"	t
ASTDeclVisitor	src/ast.hpp	/^  ASTDeclVisitor(struct context_t &ctx) : m_ctx(ctx) {}$/;"	f	class:Reflection::ASTDeclVisitor
ASTDeclVisitor	src/ast.hpp	/^class ASTDeclVisitor : public clang::RecursiveASTVisitor<ASTDeclVisitor> {$/;"	c	namespace:Reflection
BIN	Makefile	/^BIN:=bin$/;"	m
C-project-template	README.md	/^# C-project-template/;"	c
CC	Makefile	/^CC:=g++$/;"	m
CREATE_DIR_COMMAND	Makefile	/^CREATE_DIR_COMMAND:=.\/dirs.sh$/;"	m
CreateASTConsumer	src/ast.hpp	/^  std::unique_ptr<clang::ASTConsumer> CreateASTConsumer($/;"	f	class:Reflection::ReflectionASTAction	typeref:typename:std::unique_ptr<clang::ASTConsumer>
DIRS	Makefile	/^DIRS:=$(patsubst $(SRC)\/%, $(OBJ)\/%, $(shell find $(SRC)\/ -mindepth 1 -type d))$/;"	m
FIELD_TYPE_DOUBLE	src/typeinfo.hpp	/^  FIELD_TYPE_DOUBLE,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_ENUM	src/typeinfo.hpp	/^  FIELD_TYPE_ENUM$/;"	e	enum:Reflection::types_e
FIELD_TYPE_FLOAT	src/typeinfo.hpp	/^  FIELD_TYPE_FLOAT,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_FUNCTION	src/typeinfo.hpp	/^  FIELD_TYPE_FUNCTION,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_I16	src/typeinfo.hpp	/^  FIELD_TYPE_I16,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_I32	src/typeinfo.hpp	/^  FIELD_TYPE_I32,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_I64	src/typeinfo.hpp	/^  FIELD_TYPE_I64,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_I8	src/typeinfo.hpp	/^  FIELD_TYPE_I8,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_LONG_DOUBLE	src/typeinfo.hpp	/^  FIELD_TYPE_LONG_DOUBLE,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_PTR	src/typeinfo.hpp	/^  FIELD_TYPE_PTR,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_STRUCT	src/typeinfo.hpp	/^  FIELD_TYPE_STRUCT,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_UI16	src/typeinfo.hpp	/^  FIELD_TYPE_UI16,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_UI32	src/typeinfo.hpp	/^  FIELD_TYPE_UI32,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_UI64	src/typeinfo.hpp	/^  FIELD_TYPE_UI64,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_UI8	src/typeinfo.hpp	/^  FIELD_TYPE_UI8,$/;"	e	enum:Reflection::types_e
FIELD_TYPE_UNION	src/typeinfo.hpp	/^	FIELD_TYPE_UNION,$/;"	e	enum:Reflection::types_e
HandleTranslationUnit	src/ast.hpp	/^  void HandleTranslationUnit(clang::ASTContext &Context) override {$/;"	f	class:Reflection::MyASTConsumer	typeref:typename:void
Hello_u	testFiles/as.c	/^union Hello_u{$/;"	u	file:
Hi	testFiles/as.c	/^} Hi;$/;"	t	typeref:struct:__anon9d8c9a6c0108	file:
ID	src/typeinfo.hpp	/^  int64_t ID;$/;"	m	struct:Reflection::typeInfo_t	typeref:typename:int64_t
ID	src/typeinfo.hpp	/^  uint64_t ID;$/;"	m	struct:Reflection::recordRef_t	typeref:typename:uint64_t
INCLUDE	Makefile	/^INCLUDE:=include$/;"	m
INCLUDES	Makefile	/^INCLUDES:=$(shell find $(INCLUDE) -type f -name "*.h")$/;"	m
LDFLAGS	Makefile	/^LDFLAGS := $(shell llvm-config --ldflags) -lncurses -lclang-cpp$/;"	m
MyASTConsumer	src/ast.hpp	/^  MyASTConsumer(struct context_t &ctx) : Visitor(ctx) {}$/;"	f	class:Reflection::MyASTConsumer
MyASTConsumer	src/ast.hpp	/^class MyASTConsumer : public clang::ASTConsumer {$/;"	c	namespace:Reflection
NONE	src/typeinfo.hpp	/^  NONE = 0,$/;"	e	enum:Reflection::types_e
OBJ	Makefile	/^OBJ:=obj$/;"	m
OBJS	Makefile	/^OBJS:=$(patsubst $(SRC)\/%.cpp, $(OBJ)\/%.o, $(SRCS))$/;"	m
RECORD_TYPE_STRUCT	src/typeinfo.hpp	/^	RECORD_TYPE_STRUCT,$/;"	e	enum:Reflection::recordTypes_e
RECORD_TYPE_UNION	src/typeinfo.hpp	/^	RECORD_TYPE_UNION,$/;"	e	enum:Reflection::recordTypes_e
REFLECTION_AST_H	src/ast.hpp	/^#define REFLECTION_AST_H$/;"	d
REFLECTION_HANDLE_DECL_H	src/handleDecl.hpp	/^#define REFLECTION_HANDLE_DECL_H$/;"	d
REFLECTION_TYPEINFO_H	src/typeinfo.hpp	/^#define REFLECTION_TYPEINFO_H$/;"	d
Reflection	src/ast.hpp	/^namespace Reflection {$/;"	n
Reflection	src/handleDecl.hpp	/^namespace Reflection {$/;"	n
Reflection	src/typeinfo.hpp	/^namespace Reflection {$/;"	n
ReflectionASTAction	src/ast.hpp	/^  ReflectionASTAction(struct context_t &ctx) : m_ctx(ctx){};$/;"	f	class:Reflection::ReflectionASTAction
ReflectionASTAction	src/ast.hpp	/^class ReflectionASTAction : public clang::ASTFrontendAction {$/;"	c	namespace:Reflection
SRC	Makefile	/^SRC:=src$/;"	m
SRCS	Makefile	/^SRCS:=$(shell find $(SRC) -type  f -name "*.cpp")$/;"	m
SimpleFrontendActionFactory	src/ast.cpp	/^    SimpleFrontendActionFactory(struct context_t &ctx) : m_ctx(ctx) {}$/;"	f	class:Reflection::customFrontendActionFactory::SimpleFrontendActionFactory	file:
SimpleFrontendActionFactory	src/ast.cpp	/^  class SimpleFrontendActionFactory$/;"	c	function:Reflection::customFrontendActionFactory	file:
TARGET	Makefile	/^TARGET:=$(BIN)\/reflection$/;"	m
TraverseDecl	src/ast.cpp	/^bool Reflection::ASTDeclVisitor::TraverseDecl(clang::Decl *D) {$/;"	f	class:Reflection::ASTDeclVisitor	typeref:typename:bool
VALGRIND_OUT	Makefile	/^VALGRIND_OUT:=.\/val_out.txt$/;"	m
Visitor	src/ast.hpp	/^  ASTDeclVisitor Visitor;$/;"	m	class:Reflection::MyASTConsumer	typeref:typename:ASTDeclVisitor
__anon4fe5c53f0108	testFiles/lol.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0108	testFiles/as.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0208	testFiles/as.c	/^typedef struct {$/;"	s	file:
__anon9d8c9a6c0308	testFiles/as.c	/^	struct {$/;"	s	struct:__anon9d8c9a6c0208	file:
__anon9d8c9a6c0408	testFiles/as.c	/^	struct {$/;"	s	struct:__anon9d8c9a6c0208	file:
__anon9d8c9a6c0508	testFiles/as.c	/^	struct {$/;"	s	function:main	file:
a	testFiles/as.c	/^		int a;$/;"	m	struct:main::__anon9d8c9a6c0508	typeref:typename:int	file:
a	testFiles/as.c	/^	int a;$/;"	m	struct:__anon9d8c9a6c0208	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:__anon9d8c9a6c0108	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:hello_t	typeref:typename:int	file:
a	testFiles/as.c	/^  int a;$/;"	m	struct:helloo	typeref:typename:int	file:
a	testFiles/lol.c	/^	int a;$/;"	m	struct:__anon4fe5c53f0108	typeref:typename:int	file:
a	testFiles/lol.c	/^	int a;$/;"	m	struct:lol_t	typeref:typename:int	file:
aliases	src/typeinfo.hpp	/^  std::vector<std::string> aliases;$/;"	m	struct:Reflection::typeInfo_t	typeref:typename:std::vector<std::string>
all	Makefile	/^all: dirs $(TARGET)$/;"	t
args	src/ast.hpp	/^  std::vector<const char *> args;$/;"	m	struct:Reflection::context_t	typeref:typename:std::vector<const char * >
asdklfj	testFiles/as.c	/^} asdklfj;$/;"	t	typeref:struct:__anon9d8c9a6c0208	file:
b	testFiles/as.c	/^		int b;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0308	typeref:typename:int	file:
b	testFiles/as.c	/^  int b;$/;"	m	struct:hello_t	typeref:typename:int	file:
boobies	testFiles/as.c	/^typedef asdklfj*** boobies;$/;"	t	typeref:typename:asdklfj ***	file:
bruh	testFiles/lol.c	/^} bruh;$/;"	t	typeref:struct:__anon4fe5c53f0108	file:
c	testFiles/as.c	/^		int c;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0308	typeref:typename:int	file:
clean	Makefile	/^clean:$/;"	t
context_t	src/ast.hpp	/^struct context_t {$/;"	s	namespace:Reflection
create	src/ast.cpp	/^    std::unique_ptr<clang::FrontendAction> create() override {$/;"	f	class:Reflection::customFrontendActionFactory::SimpleFrontendActionFactory	typeref:typename:std::unique_ptr<clang::FrontendAction>	file:
customFrontendActionFactory	src/ast.cpp	/^Reflection::customFrontendActionFactory(struct context_t &ctx) {$/;"	f	class:Reflection	typeref:typename:std::unique_ptr<clang::tooling::FrontendActionFactory>
d	testFiles/as.c	/^		int d;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	typeref:typename:int	file:
dirs	Makefile	/^dirs:$/;"	t
f	testFiles/as.c	/^		int f;$/;"	m	struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	typeref:typename:int	file:
field_t	src/typeinfo.hpp	/^struct field_t {$/;"	s	namespace:Reflection
fields	src/typeinfo.hpp	/^  std::vector<field_t> fields;$/;"	m	struct:Reflection::typeInfo_t	typeref:typename:std::vector<field_t>
fileName	src/typeinfo.hpp	/^  std::string fileName;$/;"	m	struct:Reflection::recordRef_t	typeref:typename:std::string
fileName	src/typeinfo.hpp	/^  std::string fileName;$/;"	m	struct:Reflection::typeInfo_t	typeref:typename:std::string
filename	src/ast.hpp	/^  char *filename;$/;"	m	struct:Reflection::context_t	typeref:typename:char *
format	Makefile	/^format: $(SRCS) $(INCLUDES)$/;"	t
functionRef_t	src/typeinfo.hpp	/^struct functionRef_t {$/;"	s	namespace:Reflection
g	testFiles/as.c	/^	} g;$/;"	m	struct:__anon9d8c9a6c0208	typeref:struct:__anon9d8c9a6c0208::__anon9d8c9a6c0408	file:
gae	testFiles/as.c	/^typedef asdklfj gae;$/;"	t	typeref:typename:asdklfj	file:
handleFieldDecl	src/handleDecl.cpp	/^void Reflection::handleFieldDecl($/;"	f	class:Reflection	typeref:typename:void
handleRecordDecl	src/handleDecl.cpp	/^void Reflection::handleRecordDecl($/;"	f	class:Reflection	typeref:typename:void
handleTypedefDecl	src/handleDecl.cpp	/^void Reflection::handleTypedefDecl($/;"	f	class:Reflection	typeref:typename:void
hello	testFiles/as.c	/^} hello;$/;"	t	typeref:struct:hello_t	file:
hello_t	testFiles/as.c	/^typedef struct hello_t {$/;"	s	file:
helloo	testFiles/as.c	/^struct helloo {$/;"	s	file:
info	src/typeinfo.hpp	/^  void *info;$/;"	m	struct:Reflection::typeSpecifier_t	typeref:typename:void *
level	src/typeinfo.hpp	/^  uint32_t level;$/;"	m	struct:Reflection::ptrRef_t	typeref:typename:uint32_t
lmao	testFiles/as.c	/^	struct helloo ***lmao;$/;"	m	struct:__anon9d8c9a6c0208	typeref:struct:helloo ***	file:
lol_t	testFiles/lol.c	/^struct lol_t{$/;"	s	file:
m_ctx	src/ast.cpp	/^    struct context_t &m_ctx;$/;"	m	class:Reflection::customFrontendActionFactory::SimpleFrontendActionFactory	typeref:struct:context_t &	file:
m_ctx	src/ast.hpp	/^  struct context_t &m_ctx;$/;"	m	class:Reflection::ASTDeclVisitor	typeref:struct:context_t &
m_ctx	src/ast.hpp	/^  struct context_t &m_ctx;$/;"	m	class:Reflection::ReflectionASTAction	typeref:struct:context_t &
main	src/main.cpp	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	testFiles/as.c	/^int main(void){$/;"	f	typeref:typename:int
name	src/typeinfo.hpp	/^	std::string name;$/;"	m	struct:Reflection::field_t	typeref:typename:std::string
name	src/typeinfo.hpp	/^  std::string name;$/;"	m	struct:Reflection::typeInfo_t	typeref:typename:std::string
offset	src/typeinfo.hpp	/^  uint64_t offset;$/;"	m	struct:Reflection::field_t	typeref:typename:uint64_t
parameters	src/typeinfo.hpp	/^  std::vector<typeSpecifier_t> parameters;$/;"	m	struct:Reflection::functionRef_t	typeref:typename:std::vector<typeSpecifier_t>
ptrRef_t	src/typeinfo.hpp	/^struct ptrRef_t {$/;"	s	namespace:Reflection
recordRef_t	src/typeinfo.hpp	/^struct recordRef_t {$/;"	s	namespace:Reflection
recordType	src/typeinfo.hpp	/^	enum recordTypes_e recordType;$/;"	m	struct:Reflection::typeInfo_t	typeref:enum:recordTypes_e
recordTypes_e	src/typeinfo.hpp	/^enum recordTypes_e {$/;"	g	namespace:Reflection
returnType	src/typeinfo.hpp	/^  typeSpecifier_t returnType;$/;"	m	struct:Reflection::functionRef_t	typeref:typename:typeSpecifier_t
run	Makefile	/^run: $(TARGET)$/;"	t
testGen	testFiles/as.c	/^#define testGen(/;"	d	file:
type	src/typeinfo.hpp	/^  typeSpecifier_t type;$/;"	m	struct:Reflection::field_t	typeref:typename:typeSpecifier_t
type	src/typeinfo.hpp	/^  typeSpecifier_t type;$/;"	m	struct:Reflection::ptrRef_t	typeref:typename:typeSpecifier_t
type	src/typeinfo.hpp	/^  types_e type;$/;"	m	struct:Reflection::typeSpecifier_t	typeref:typename:types_e
typeInfoVec	src/ast.hpp	/^  using typeInfoVec = std::vector<Reflection::typeInfo_t>;$/;"	t	class:Reflection::ReflectionASTAction	typeref:typename:std::vector<Reflection::typeInfo_t>
typeInfoVec	src/ast.hpp	/^  using typeInfoVec = std::vector<Reflection::typeInfo_t>;$/;"	t	struct:Reflection::context_t	typeref:typename:std::vector<Reflection::typeInfo_t>
typeInfo_t	src/typeinfo.hpp	/^struct typeInfo_t {$/;"	s	namespace:Reflection
typeSpecifier_t	src/typeinfo.hpp	/^struct typeSpecifier_t {$/;"	s	namespace:Reflection
typeinfo	src/ast.hpp	/^  typeInfoVec typeinfo;$/;"	m	struct:Reflection::context_t	typeref:typename:typeInfoVec
types_e	src/typeinfo.hpp	/^enum types_e {$/;"	g	namespace:Reflection
valgrind	Makefile	/^valgrind: dirs $(TARGET)$/;"	t
~ASTDeclVisitor	src/ast.hpp	/^  ~ASTDeclVisitor() { free(m_ctx.filename); }$/;"	f	class:Reflection::ASTDeclVisitor
